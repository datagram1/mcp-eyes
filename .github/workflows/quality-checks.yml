name: Quality Checks

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  quality-checks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript compilation
      run: npm run build:clean

    - name: Run markdown linting
      run: npm run lint:md

    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check package.json validation
      run: npm pack --dry-run

    - name: Verify dist directory
      shell: bash
      run: |
        if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
          echo "❌ dist directory is empty or missing"
          exit 1
        else
          echo "✅ dist directory exists with files"
          ls -la dist/
        fi

    - name: Check main entry points
      shell: bash
      run: |
        MAIN_FILE=$(node -p "require('./package.json').main")
        if [ ! -f "$MAIN_FILE" ]; then
          echo "❌ Main entry point $MAIN_FILE not found"
          exit 1
        else
          echo "✅ Main entry point $MAIN_FILE exists"
        fi

    - name: Check binary files
      shell: bash
      run: |
        BIN_FILES=$(node -p "Object.values(require('./package.json').bin).join(' ')")
        for bin_file in $BIN_FILES; do
          if [ ! -f "$bin_file" ]; then
            echo "❌ Binary file $bin_file not found"
            exit 1
          else
            echo "✅ Binary file $bin_file exists"
          fi
        done

    - name: Check for sensitive data
      shell: bash
      run: |
        echo "Checking for potential sensitive data..."
        SENSITIVE_PATTERNS=("api[_-]?key" "password" "secret" "token" "private[_-]?key" "auth[_-]?token")
        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
          if grep -r -i "$pattern" dist/ 2>/dev/null | grep -v "node_modules" | grep -v ".git"; then
            echo "⚠️ Potential sensitive data found with pattern: $pattern"
          fi
        done
        echo "✅ Sensitive data check completed"

    - name: Test basic functionality (macOS only)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "Testing basic functionality on macOS..."
        # Test if the basic server can start without errors
        timeout 10s node dist/basic-server.js --help || echo "Basic server test completed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files-${{ matrix.os }}-node${{ matrix.node-version }}
        path: dist/
        retention-days: 30

  version-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check version consistency
      shell: bash
      run: |
        PKG_VERSION=$(node -p "require('./package.json').version")
        VERSION_JSON_VERSION=$(node -p "require('./version.json').version")
        echo "Package.json version: $PKG_VERSION"
        echo "Version.json version: $VERSION_JSON_VERSION"
        if [ "$PKG_VERSION" != "$VERSION_JSON_VERSION" ]; then
          echo "❌ Version mismatch detected!"
          exit 1
        else
          echo "✅ Version consistency check passed"
        fi

    - name: Check NPM badge
      shell: bash
      run: |
        echo "Checking NPM badge URL..."
        if grep -q "img.shields.io/npm/v/mcp-eyes" README.md; then
          echo "✅ NPM badge uses correct shields.io URL"
        else
          echo "❌ NPM badge needs to be updated to use shields.io"
          exit 1
        fi

  release-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Verify release version
      shell: bash
      run: |
        RELEASE_VERSION="${{ github.event.release.tag_name }}"
        PKG_VERSION=$(node -p "require('./package.json').version")
        echo "Release version: $RELEASE_VERSION"
        echo "Package version: $PKG_VERSION"
        if [ "$RELEASE_VERSION" != "v$PKG_VERSION" ]; then
          echo "❌ Release version doesn't match package version!"
          exit 1
        else
          echo "✅ Release version matches package version"
        fi

    - name: Test NPM publish (dry run)
      run: npm publish --dry-run

    - name: Check dist files for release
      shell: bash
      run: |
        echo "Checking dist files for release..."
        if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
          echo "❌ dist directory is empty or missing for release"
          exit 1
        fi
        
        # Check for required files
        REQUIRED_FILES=("basic-server.js" "advanced-server-simple.js")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "dist/$file" ]; then
            echo "❌ Required file dist/$file missing for release"
            exit 1
          else
            echo "✅ Required file dist/$file exists"
          fi
        done
        
        echo "✅ All required dist files present for release"
